diff --git a/constructs/RemixSite.js b/constructs/RemixSite.js
index 7cb05d8a1c525f3f358e1124da41c1a929672b5b..264ade0bc2a72919a4244ec134c42c15de6dec38 100644
--- a/constructs/RemixSite.js
+++ b/constructs/RemixSite.js
@@ -26,7 +26,9 @@ export class RemixSite extends SsrSite {
     }
     plan() {
         const { path: sitePath, edge } = this.props;
+        console.log("Here inside the RemixSite plan method", sitePath, edge);
         const { handler, inject } = this.createServerLambdaBundle(edge ? "edge-server.js" : "regional-server.js");
+        console.log("Handler and inject", handler, inject);
         const format = this.getServerModuleFormat();
         const serverConfig = {
             description: "Server handler for Remix",
@@ -79,7 +81,7 @@ export class RemixSite extends SsrSite {
                     type: "s3",
                     copy: [
                         {
-                            from: "public",
+                            from: "build",
                             to: "",
                             cached: true,
                             versionedSubDir: "build",
@@ -176,10 +178,10 @@ export class RemixSite extends SsrSite {
         // template to create this wrapper within the "core server build" output
         // directory.
         // Ensure build directory exists
-        const buildPath = path.join(this.props.path, "build");
+        const buildPath = path.join(this.props.path, "build", "custom");
         fs.mkdirSync(buildPath, { recursive: true });
         // Copy the server lambda handler
-        fs.copyFileSync(path.resolve(__dirname, `../support/remix-site-function/${wrapperFile}`), path.join(buildPath, "server.js"));
+        fs.copyFileSync(path.resolve(__dirname, `../support/remix-site-function/${wrapperFile}`), path.join(buildPath, "apig-server.js"));
         // Copy the Remix polyfil to the server build directory
         //
         // Note: We need to ensure that the polyfills are injected above other code that
@@ -187,11 +189,11 @@ export class RemixSite extends SsrSite {
         // doesn't appear to guarantee this, we therefore leverage ESBUild's
         // `inject` option to ensure that the polyfills are injected at the top of
         // the bundle.
-        const polyfillDest = path.join(buildPath, "polyfill.js");
-        fs.copyFileSync(path.resolve(__dirname, "../support/remix-site-function/polyfill.js"), polyfillDest);
+        // const polyfillDest = path.join(buildPath, "polyfill.js");
+        // fs.copyFileSync(path.resolve(__dirname, "../support/remix-site-function/polyfill.js"), polyfillDest);
         return {
-            handler: path.join(buildPath, "server.handler"),
-            inject: [polyfillDest],
+            handler: path.join(buildPath, "apig-server.handler"),
+            inject: [],
         };
     }
     getConstructMetadata() {
diff --git a/support/remix-site-function/regional-server.js b/support/remix-site-function/regional-server.js
index 8e543302442e6d95f85fce2e2a2e50a743111582..6256a434ac2d479001823a52daeed9275e7f2296 100644
--- a/support/remix-site-function/regional-server.js
+++ b/support/remix-site-function/regional-server.js
@@ -12,7 +12,7 @@ import {
 } from "@remix-run/node";
 
 // Import the server build that was produced by `remix build`;
-import * as remixServerBuild from "./index.js";
+import * as remixServerBuild from "./server.js";
 
 /**
  * Common binary MIME types
